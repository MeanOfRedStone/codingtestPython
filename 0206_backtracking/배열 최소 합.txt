"""
배열 최소 합

1. 가능한 모든 경우 -> 정답

2. 어떻게 시간을 줄일 것인가
->가지치기
3. 가자치기는 제일 위에서 한다 - 종료 조건 위에서

4. visited를 공백으로 만들어 append하는 방식은 제일 느린 방식이다 -> 하지 말자
"""
def back_tracking(combination_sum, depth):
    global combination
    global min_sum
    global visited
    if combination_sum >= min_sum:
        return
    
    if depth == N:
        min_sum = min(min_sum, combination_sum)
        return

    for i in range(N):
        if visited[i] == 1:
            continue
        visited[i] = 1
        back_tracking(combination_sum + board[depth][i], depth + 1)
        visited[i] = 0

T = int(input())

for tc in range(1, T + 1):
    N = int(input())

    board = []
    for i in range(N):
        board.append(list(map(int, input().split())))
    min_sum = 30
    visited = [0 for _ in range(N)]
    back_tracking(0, 0)
    print(f"#{tc} {min_sum}")