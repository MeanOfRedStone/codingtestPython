dx = [0, 1, 0, -1]
dy = [1, 0, -1, 0]

def dfs(row, col):
    global graph
    global answer
    global N


    visited = [[0 for _ in range(N + 2)]for _ in range(N +2)]

    stack = []
    stack.append([row, col])

    while stack:
        node = stack.pop()

        if visited[node[0]][node[1]] == 1 or graph[node[0]][node[1]] == '1':
            continue

        if graph[node[0]][node[1]] == '3':
            answer = 1
            return

        visited[node[0]][node[1]] = 1

        for i in range(4):
            next_row = node[0] + dx[i]
            next_col = node[1] + dy[i]
            stack.append([next_row, next_col])

T = int(input())

graph = []
answer = 0

for tc in range(1, T + 1):
    N = int(input())

    graph = [['1' for _ in range(N + 2)]]
    for i in range(N):
        graph.append(['1'] + list(input()) + ['1'])
    graph.append(['1' for _ in range(N + 2)])

    answer = 0
    for i in range(1, N + 1):
        for j in range(1, N + 1):
            if graph[i][j] == '2':
                dfs(i, j)

    print(f"#{tc} {answer}")