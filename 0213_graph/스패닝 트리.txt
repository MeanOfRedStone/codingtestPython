def kruskal():
    value = 0
    count = 0
    for s, e, w in edges:
        if find(s) == find(e):
            continue

        union(s, e)
        value += w
        count += 1

        if count >= V - 1:
            break

    return value


def union(node_a, node_b):
    global parents

    parents[find(node_a)] = find(node_b)


def find(node):
    if parents[node] != node:
        parents[node] = find(parents[node])
    return parents[node]


V, E = map(int, input().split())
parents = [i for i in range(V + 1)]
edges = []
for i in range(E):
    edges.append(tuple(map(int, input().split())))
edges.sort(key=lambda x: x[2])
answer = kruskal()
print(answer)