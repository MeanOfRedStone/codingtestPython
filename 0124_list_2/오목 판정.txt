```
행과 열의 인덱스를 이용해 편하게 탐색하는 방법으로 개선해보자

강사님강의도 완전탐색으로 비슷하다

```

dx = [-1, 1, 0, 0, 1, -1, 1, -1]
dy = [0, 0, -1, 1, 1, -1, -1, 1]
 
def search() :
    global board
    global N
    global answers
    is_continuous = 0
    for i in range(N):
        for j in range(N):
            if board[i][j] == "o":
                is_continuous = find_continuous_block(i, j)
 
            if is_continuous == 1:
                answers.append("YES")
                return
 
    answers.append("NO")
 
def find_continuous_block(row, col) :
    global board
    global N
 
    index = 0
    continuous_block_count = 1
    next_row = row
    next_col = col
 
    while index < 2 :
        next_row = next_row + dx[index]
        next_col = next_col + dy[index]
 
        if next_row < 0 or next_row == N :
            index += 1
            next_row = row
            next_col = col
            continue
 
        next_block = board[next_row][next_col]
        if next_block == '.' :
            index += 1
            next_row = row
            next_col = col
            continue
 
        continuous_block_count += 1
 
        if continuous_block_count == 5 :
            return 1
 
    continuous_block_count = 1
    while index < 4 :
        next_row = next_row + dx[index]
        next_col = next_col + dy[index]
 
        if next_col < 0 or next_col == N:
            index += 1
            next_row = row
            next_col = col
            continue
 
        next_block = board[next_row][next_col]
        if next_block == '.':
            index += 1
            next_row = row
            next_col = col
            continue
 
        continuous_block_count += 1
 
        if continuous_block_count == 5:
            return 1
 
    continuous_block_count = 1
    while index < 6:
        next_row = next_row + dx[index]
        next_col = next_col + dy[index]
 
        if next_row < 0 or next_row == N or next_col < 0 or next_col == N:
            index += 1
            next_row = row
            next_col = col
            continue
 
        next_block = board[next_row][next_col]
        if next_block == '.':
            index += 1
            next_row = row
            next_col = col
            continue
 
        continuous_block_count += 1
 
        if continuous_block_count == 5:
            return 1
 
    continuous_block_count = 1
    while index < 8:
        next_row = next_row + dx[index]
        next_col = next_col + dy[index]
 
        if next_row < 0 or next_row == N or next_col < 0 or next_col == N :
            index += 1
            next_row = row
            next_col = col
            continue
 
        next_block = board[next_row][next_col]
        if next_block == '.':
            index += 1
            next_row = row
            next_col = col
            continue
 
        continuous_block_count += 1
 
        if continuous_block_count == 5:
            return 1
    return 0
 
T = int(input())
 
board = []
N = 0
answers = []
 
for tc in range(T) :
    # 판의 길이
    N = int(input())
 
    # 'o' : 돌이 있는 칸 '.' : 돌이 없는 칸
    board = []
    for i in range(N) :
        board.append(list(input()))
 
    search()
 
for i in range(1, T + 1) :
    print(f"#{i} {answers[i - 1]}")