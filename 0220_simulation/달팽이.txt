def fill_board(start):
    global board

    ei, ej = 0, 0
    number = 1
    r, c = start, start
    board[r][c] = 1
    idx = -1
    depth = 0

    for ___ in range(N - 2):
        depth += 1
        for _ in range(2):
            idx = (idx + 1) % 4
            dx, dy = direction[idx]
            for __ in range(depth):
                number += 1
                r, c = r + dx, c + dy
                if number == F:
                    ei = r
                    ej = c
                board[r][c] = number

    depth += 1
    for _ in range(3):
        idx = (idx + 1) % 4
        dx, dy = direction[idx]
        for __ in range(depth):
            number += 1
            r, c = r + dx, c + dy
            if number == F:
                ei = r
                ej = c
            board[r][c] = number

    return ei, ej




direction = [(-1, 0), (0, 1), (1, 0), (0, -1)]

# 홀수인 자연수
N = int(input())
# 위치를 찾고자하는 N ** 2이하의 자연수
F = int(input())

board = [[0 for _ in range(N)]for _ in range(N)]
ei, ej = fill_board(len(board) // 2)
if F == 1:
    ei, ej = N // 2, N // 2
for row in board:
    print(*row)

print(ei + 1, ej + 1)