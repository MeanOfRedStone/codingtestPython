def merge_sort(numbers):
    global count

    if len(numbers) <= 1:
        return numbers

    center = len(numbers) // 2
    left_numbers = merge_sort(numbers[ : center])
    right_numbers = merge_sort(numbers[center:])

    if left_numbers[-1] > right_numbers[-1]:
        count += 1

    partial_numbers = []
    left_index = 0
    right_index = 0
    while left_index < len(left_numbers) and right_index < len(right_numbers):
        if left_numbers[left_index] < right_numbers[right_index]:
            partial_numbers.append(left_numbers[left_index])
            left_index += 1
            continue

        partial_numbers.append(right_numbers[right_index])
        right_index += 1

    if left_index < len(left_numbers):
        partial_numbers += left_numbers[left_index:]
        return partial_numbers

    partial_numbers += right_numbers[right_index:]
    return partial_numbers

T = int(input())

for tc in range(1, T + 1):
    N = int(input())

    numbers = list(map(int, input().split()))
    count = 0
    answer = merge_sort(numbers)
    print(f"#{tc} {answer[N//2]} {count}")