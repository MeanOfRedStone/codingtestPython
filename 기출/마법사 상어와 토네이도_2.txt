direction = [(0, -1), (1, 0), (0, 1), (-1, 0)]

ratio = [[0, 0, 0.02, 0, 0],
         [0, 0.1, 0.07, 0.01, 0],
         [0.05, 0, 0, 0, 0],
         [0, 0.1, 0.07, 0.01, 0],
         [0, 0, 0.02, 0, 0]]

def tornado():
    global ratio

    r, c = N // 2, N // 2
    d_idx = 0
    #[1] 1 ~ N-2 거리까지 토네이도 이동은 2번씩
    for distance in range(1, N - 1):
        #1. 2번씩 이동한다
        move_cnt = 1
        while move_cnt <= 2:
            #1) 방향 설정
            dx, dy = direction[d_idx]
            #2) 해당 차례의 거리만큼 이동
            for _ in range(distance):
                #(1) 모래의 이동 -> 토네이도가 한 칸 이동할때마다 모래는 이동한다
                move_sand(r, c, dx, dy)
                #(2) 토네이도의 이동
                r += dx
                c += dy
            #3) 해당 차례만큼 이동했으면 토네이도 방향 회전
            d_idx = (d_idx + 1) % 4
            for _ in range(3):
                ratio = list(zip(*ratio[::-1]))
            #4) 다음 차례로 이동
            move_cnt += 1

    #[2] N - 1의 거리는 3번 이동한다
    move_cnt = 1
    while move_cnt <= 3:
        # 1) 방향 설정
        dx, dy = direction[d_idx]
        # 2) 해당 차례의 거리만큼 이동
        for _ in range(N - 1):
            # (1) 모래의 이동 -> 토네이도가 한 칸 이동할때마다 모래는 이동한다
            move_sand(r, c, dx, dy)
            # (2) 토네이도의 이동
            r += dx
            c += dy
        # 3) 해당 차례만큼 이동했으면 토네이도 방향 회전
        d_idx = (d_idx + 1) % 4
        for _ in range(3):
            ratio = list(zip(*ratio[::-1]))
        # 4) 다음 차례로 이동
        move_cnt += 1


def move_sand(r, c, dx, dy):
    global board
    global answer

    #[1] y의 모래
    yr, yc = r + dx, c + dy
    y_sand = board[yr][yc]

    mr, mc = yr - 2, yc - 2
    move_sand = 0
    #[2] y_sand를 비율이 적힌 칸으로 이동
    for i in range(5):
        for j in range(5):
            #1. 비율이 적힌 곳의 위치
            sr, sc = mr + i, mc + j
            rate = ratio[i][j]
            if rate == 0:
                continue
            #2. 인덱스가 벗어나면 -> 정답에 모래 더해줌
            if sr < 0 or sr >= N or sc < 0 or sc >= N:
                answer += int(y_sand * rate)
                move_sand += int(y_sand * rate)
                continue

            #2-2. 인덱스가 벗어나지 않으면 -> 해당 위치에
            board[sr][sc] += int(y_sand * rate)
            move_sand += int(y_sand * rate)

    #[3] a로 모래 이동
    #1. 이동 양
    a_sand = y_sand - move_sand
    #2. 이동 위치
    ar, ac = r + 2 * dx, c + 2 * dy
    #3. 인덱스 벗어나면 -> 정답에 더해줌
    if ar < 0 or ar == N or ac < 0 or ac == N:
        answer += a_sand
        return
    #3-2. 인덱스 안이라면 -> 해당 위치에
    board[ar][ac] += a_sand

N = int(input())
board = []
for _ in range(N):
    board.append(list(map(int, input().split())))

answer = 0
tornado()
print(answer)
