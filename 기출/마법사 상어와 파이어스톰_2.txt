def magic(stage):
    global board
    board_range = 2 ** N
    m_range = (2 ** N) // (2 ** stage)
    stage_range = (2 ** stage)

    #[1] 부분마다 회전
    for i in range(m_range):
        for j in range(m_range):
            row_start, row_end = i * (stage_range), i * (stage_range) + stage_range
            col_start, col_end = j * (stage_range), j * (stage_range) + stage_range
            rotation_ball(row_start, col_start, row_end, col_end)

    #[2] 얼음 탐색
    melting = []
    for i in range(board_range):
        for j in range(board_range):
            #1. 얼음이 없는 경우 넘어감
            if board[i][j] == 0:
                continue
            ice_cnt = 0
            #1-2. 얼음이 있는 경우 4방향 탐색
            for dx, dy in ((0, 1), (1, 0), (-1, 0), (0, -1)):
                ni, nj = i + dx, j + dy
                #1) 레인지 체크
                if ni < 0 or ni == board_range or nj < 0 or nj == board_range:
                    continue
                if board[ni][nj] > 0:
                    ice_cnt += 1

            #2) 얼음이 잇는 곳이 3칸 미만이면 녹을 곳 확정
            if ice_cnt < 3:
                melting.append((i, j))

    #[3] 녹을 곳의 얼음 -1 감소
    for i, j in melting:
        board[i][j] -= 1


def rotation_ball(rs, cs, re, ce):
    global board

    temp = []
    for row in board[rs:re]:
        temp.append(row[cs:ce])

    temp = list(zip(*temp[::-1]))
    for i in range(rs, re):
        for j in range(cs, ce):
            board[i][j] = temp[i - rs][j - cs]

from collections import deque


def bfs(si, sj):
    global visited
    global ice_volume

    queue = deque()

    visited[si][sj] = 1
    cnt = 1
    queue.append((si, sj))

    while queue:
        r, c = queue.popleft()

        for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):
            nr, nc = r + dx, c + dy

            if nr < 0 or nr == 2 ** N or nc < 0 or nc == 2 ** N:
                continue
            if visited[nr][nc] == 1:
                continue
            if board[nr][nc] == 0:
                continue

            cnt += 1
            visited[nr][nc] = 1
            queue.append((nr, nc))

    ice_volume = max(ice_volume, cnt)

N, Q = map(int, input().split())

board = []
for _ in range(2 ** N):
    board.append(list(map(int, input().split())))

spells = list(map(int, input().split()))
for stage in spells:
    magic(stage)

total_ice = 0
for row in board:
    total_ice += sum(row)

ice_volume = 0
visited = [[0 for _ in range(2 ** N)]for _ in range(2**N)]
for i in range(2 ** N):
    for j in range(2 ** N):
        if board[i][j] > 0 and visited[i][j] == 0:
            bfs(i, j)

print(total_ice)
print(ice_volume)