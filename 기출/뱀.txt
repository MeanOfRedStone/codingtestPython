
검색




4
Welcome to Mattermost
Let's get up and running.

On Boarding videoWatch overview
Take a tour of Channels.
Invite team members to the workspace.
Download the Desktop and Mobile Apps.
Complete your profile.
No thanks, I’ll figure it out myself

채널 탐색
통계
Drafts
1

채널
DoneDoneTeam
코드리뷰
evening
수업자료
evening_share
꿀팁공유
Q&A
공지사항

개인 메시지

문호선 (강사)
배영석
변재성
3
김소현, 배영석, 서다경
이리나
서다경
홍석의 (당신)
이택민
서강운
3
김유경, 변재성, 이택민
전준혁
김준환
김유경
정해슬
2
배영석, 변재성
문상돈
김도현
이영석
조재범

Invite Members

온라인



채널 설명 추가하기..

At 오전 11:00 3월 13일 수요일, 홍석의 wrote, 오전 리뷰 제출합니다, 1 attachment, 4 reactions

문호선 (강사)
문호선 (강사)님과의 개인 메시지가 시작되었습니다.
개인 메시지나 여기서 공유된 파일들은 외부에서 볼 수 없습니다.


헤더 설정
1월 26일

홍석의
Update your status
오후 3:51
최종 제출

<백두산 문제 에지케이스>

#1
1
5
0 0 0 0 0
0 6 3 1 0
0 1 2 1 0
0 1 1 3 0 
0 0 0 0 0
-> 테두리를 0으로 둘러주는 경우만 생각하면 틀릴 수 있는 에지 케이스입니다.
    주로 테두리를 0으로 둘러주기 때문에  리스트의 값이 0이면 가장자리로 판단합니다.
    하지만 화산의 위험도를 0부터 주기 때문에 실제 화산인 지역도 가장자리로 판단할 수 있습니다.

#2
1
5
1 1 1 1 1
1 6 3 1 1
4 1 2 1 1
1 1 1 1 1
1 1 1 1 1
-> 활화산이 1개인 경우를 생각하지 않는다면 틀릴 수 있는 에지 케이스입니다.
    문제 마지막 조건을 꼼꼼히 읽지 않는다면 활화산이 1개인 경우 최댓값 - 최솟값을 제출할 수 있습니다

#3
1
5
1 1 1 1 1
1 10 3 1 1
4 1 2 1 1
1 1 1 10 1
1 1 1 1 1
-> 최댓값, 최솟값 설정을 꼼꼼히 하지 않는다면 틀릴 수 잇는 에지 케이스입니다.
    테스트 케이스의 그림만 보고 최댓값 최솟값을 설정한다면 최솟값과 최댓값이 모두 10인 경우를 생각하지 못할 수 있습니다

더보기
2월 02일

홍석의
Update your status
오후 4:03
최종 제출했습니다


홍석의
Update your status
오후 4:25
수정 제출(16:20) + 에지케이스 제출합니다

같은 시간에 용암은 사람보다 먼저 큐에서 이동을 하더라도 사람의 이동을 막을 수 없는 조건을 체크하는 에지케이스입니다.
테스트케이스의 경우 사람과 용암이 같은 장소로 이동하는 경우에만 제약 조건을 생각할 수 있었습니다.
백두산2_에지케이스.txt
TXT42B
감사합니다 다음부터 주의하도록 하겠습니다
마지막으로 최종 제출이라고 얘기한 것이 제출된 것이라고 생각했습니다

2월 08일

홍석의
Update your status
오후 4:24
최종 제출입니다 몇 차 제출인지는 말씀 안드려도 되는게 맞을까요?

종료 인덱스를 유심히 살펴보지 않는다면 틀리는 에지케이스입니다.
주어진 테스트케이스는 종료점에 도착하기 전에 시간 제한으로 도달합니다.
종료 지점은 N -1이 아니라 N입니다.
따라서 문제의 조건인 종료 도착점은 N이라는 문구를 읽어보지 않는다면 index에러가 발생할 수 있습니다.

쇠똥구리 에지 케이스.txt
TXT452B

문호선 (강사)
오후 4:25
네, 마지막 제출을 기준으로 채점합니다

2월 16일

홍석의
Update your status
오후 4:40
최종 제출입니다!

2월 19일

홍석의
Update your status
오후 1:23
강사님 지금 팀별로 육성으로 얘기 나눠도 되는 시간일까요?

*대화


문호선 (강사)
오후 1:24
네, 조용히 얘기나눠도 되는 시간입니다^^

2월 27일

홍석의
Update your status
오전 9:03
홍석의_연산자끼워넣기.py
PY2KB
홍석의_컨베이어벨트위의로봇.py
PY5KB
홍석의_톱니바퀴.py
PY6KB

홍석의
Update your status
오후 4:32
27일 기출 리뷰 제출입니다

홍석의_로봇 청소기.py
PY3KB
홍석의_연구소.py
PY3KB

문호선 (강사)
오후 4:34
확실히 코드가 더 읽기 좋아보입니다! 잘 하셨습니다^^


홍석의
Update your status
오후 4:34
감사합니다!

2월 28일

홍석의
Update your status
오후 9:51
추후 리팩토링 하겠습니다!

홍석의_테트로미노.py
PY3KB
홍석의_퇴사.py
PY5KB
2월 29일

홍석의
Update your status
오후 4:04
홍석의_마법사 상어와 파이어 볼.py
PY5KB

문호선 (강사)
오후 4:05
구상대로 깔끔하게 잘 구현하셨습니다^^ 즐거운 주말 보내세요!


홍석의
Update your status
오후 4:05
네 감사합니다!

3월 04일

홍석의
Update your status
오후 5:01
홍석의_주사위 굴리기.py
PY4KB
홍석의_치킨 배달.py
PY4KB
리뷰 보냅니다!


문호선 (강사)
오후 5:04
잘 정리하셨고, 특히 다른 사람들 코드를 보면서 그 중 내가 활용할 수 있는것들을 늘려나가는건 특히 좋은것 같습니다
코드를 간결하게 작성하려고 노력하는만큼 점점 짧고 간결하게 되고 있는것 같습니다. 파이팅!


홍석의
Update your status
오후 5:05
감사합니다! 더욱 분발하겠습니다

3월 05일

홍석의
Update your status
오후 5:36
홍석의_경사로.py
PY7KB
홍석의_스타트와 링크.py
PY3KB
리뷰 제출합니다


문호선 (강사)
오후 5:38
꼼꼼한 주석과 함께 잘 정리하셨습니다. 석의씨 스타일만의 장점을 잘 살리시길..!

3월 06일

홍석의
Update your status
오후 1:30
강사님 konlpy mecab 사용이 솔루션에 올라온데로 해도 안되는 것 같습니다


문호선 (강사)
오후 1:31
그런가요? 돌려보고 배포했는데.. 한번 살펴보겠습니다


홍석의
Update your status
오후 1:31
넵 감사합니다


홍석의
Update your status
오후 9:18
리뷰 제출합니다!

홍석의_마법사 상어와 비바라기.py
PY3KB
홍석의_상어 초등학교.py
PY4KB
목요일

문호선 (강사)
오전 4:39
정확히 알고있으시기 때문에.. 추가로 언급하지는 않겠습니다^^;;  그 당시의 느낌과 리뷰를 꼭 기억하시고, 앞으로 꼭 적용하길 바랍니다


문호선 (강사)
오전 9:09
https://www.codetree.ai/training-field/frequent-problems/problems/virus-experiment/description?page=3&pageSize=20

금요일

홍석의
Update your status
오전 11:27
제출 완료입니다


홍석의
Update your status
오후 4:27
리뷰 제출합니다!

홍석의_미세먼지 안녕.py
PY6KB

문호선 (강사)
오후 4:30
구상과정도 구현도 잘 작성하셨습니다. 손으로 꼼꼼하게 잘 구상도 했고, 구현도 깔끔하게 잘 됬네요^^
이대로만 컨디션 유지하면서 제 자리 찾으시길..!!

월요일

홍석의
Update your status
오전 10:41
리뷰 제출합니다!

홍석의_드래곤 커브.py
PY5KB

문호선 (강사)
오전 10:45
석의씨만의 문제풀이 전략이 잘 정리되어가고 있는것 같아서 좋습니다
몸에 익은 것들은 우선순위를 좀 내리고, 자주실수하거나 걱정되는 부분을 좀 더 신경쓰면서 체계화 시키면 실수를 줄이고, 구현을 꼼꼼하게 잘 할 수 있을것 같습니다. 고생하셨습니다^^


홍석의
Update your status
오전 10:47
넵 실수 할때 대처법을 좀 더 체계화해보도록 하겠습니다


홍석의
Update your status
오전 11:15
나무 재테크도 풀이 방식 좀 더 바꿔서 제출 성공해서 리뷰 남깁니다 

나무 재테크_홍석의.py
PY5KB

문호선 (강사)
오전 11:19
고생하셨습니다^^


홍석의
Update your status
오후 5:22
리뷰 제출합니다!

홍석의_마법사 상어와 토네이도.py
PY5KB
홍석의_마법사 상어와 파이어 스톰.py
PY5KB

문호선 (강사)
오후 5:25
정확하게 잘 리뷰하셨네요! 지금 리뷰한대로만 대비해서 정리하면 좋을것 같습니다!
다른 분들 코드도 종종 살펴보시고, 나에게 맞는 로직이 있으면 메모해 놓았다가 시도해보시길..


홍석의
Update your status
오후 5:25
넵 감사합니다!

어제

홍석의
Update your status
오전 11:38
홍석의_감시.py
PY5KB
홍석의_인구 이동.py
PY3KB
리뷰 제출합니다

Saved

문호선 (강사)
오전 11:40
딥카피 또는 new_arr = [x[ : : ] for x in arr]  # 이 코드가 딥카피보다는 빠르니.. 참고하세요! 


홍석의
Update your status
오전 11:40
오 감사합니다!

오늘

홍석의
Update your status
오전 9:06
리뷰 제출합니다!

홍석의_뱀.py
PY2KB
홍석의_사다리 조작.py
PY5KB

문호선 (강사)
오전 10:04
시간내에 안된부분은 아쉽지만, 분명히 코드 구조가 좋아지고 있고 석의씨 만의 스타일로 발전하고 있습니다
이번 문제에서 아쉽게 생각한 부분은(일부 이전에도 아쉬웠던 부분) 재발방지하고(또는 최대한 빠르게 찾고)
나만의 루틴으로 문제를 해결해나가면 더 안정적이 될거라고 생각합니다. 파이팅하세요!


홍석의
Update your status
오전 10:45
감사합니다!


홍석의
Update your status
오전 11:00
오전 리뷰 제출합니다

홍석의_아기 상어.py
PY4KB
Login Successful
문호선 (강사)에 글쓰기












선택된 파일 없음


Thread
꿀팁공유

오늘

이리나
오전 9:29
구상
구상 시간이 오래 걸려도 구상을 잘하면 구현은 금방 끝납니다

문제 읽으면서 주의할 점 적어놓기 (주석 or 필기) -> 구현 시 중간중간 확인
구현 전체적인 흐름 적어보기
구현할 기능(함수)별로 필요한 자료형, 템플릿 러프하게 생각하거나 적어보기 -> 스스로 생각해도 너무 복잡한 것 같으면 다시 구상
Login Successful
이 글타래에 답글 달기...












선택된 파일 없음


You have dropped the item. You have moved the item from position 4 to position 4
홍석의_뱀.py
홍석의Shared In ~문호선 (강사)

1 of 2


홍석의_뱀.py - Python
"""
<풀이 과정>
* 총 33분 - 구상(18분) , 구현(15분), 제출 성공
뱀 문제는 구상이 정말 독특해 기억에 남았던 문제였습니다. 이전에 풀었던 방식이 기억에 남아 쉽게 구상하고 구현할 수 있었습니다.

"""

from collections import deque
direction = [(0, 1), (1, 0), (0, -1), (-1, 0)]
def move_snake():
    global board
    global d_info

    #[1] 초기 조건 설정
    #1. 뱀
    snake = deque()
    snake.append((0, 0))
    board[0][0] = 1
    d_idx = 0
    #2. 시간
    time = 0
    #3. 방향 변화 정보
    change_time, change_direction = d_info.popleft()

    #[2] 뱀의 움직임
    while True:
        # 0. 시간 증가
        time += 1
        #1. 움직일 좌표
        dx, dy = direction[d_idx]
        r, c = snake[-1]
        nr, nc = r + dx, c + dy
        #2. 제약 조건
        #1) 벽을 만나면 종료(인덱스 초과)
        if nr < 0 or nr == N or nc < 0 or nc == N:
            return time
        #2) 자기 자신을 만나면 종료
        if board[nr][nc] == 1:
            return time
        #3. 사과가 없는 경우 -> 꼬리가 감소함
        if board[nr][nc] != -1:
            #1) 꼬리 좌표
            tr, tc = snake.popleft()
            board[tr][tc] = 0
        #4. 머리 이동
        snake.append((nr, nc))
        board[nr][nc] = 1
        #5. 방향전환 시간 확인
        if time == change_time:
            #1) 방향 전환
            if change_direction == 'L':
                d_idx = (d_idx - 1) % 4
            if change_direction == 'D':
                d_idx = (d_idx + 1) % 4
            #2) 새로운 전환 명령 확인
            if d_info:
                change_time, change_direction = d_info.popleft()


# 보드의 크기
N = int(input())
# 사과의 개수
K = int(input())
board = [[0 for _ in range(N)]for _ in range(N)]
for _ in range(K):
    r, c = map(int, input().split())
    board[r - 1][c - 1] = -1
# 뱀의 방향 변환 횟수
L = int(input())
d_info = deque()
for _ in range(L):
    X, C = map(str, input().split())
    X = int(X)
    d_info.append((X, C))

answer = move_snake()

print(answer)