import sys
sys.stdin = open("in.txt", "r")

"""
<풀이 과정>
* 총 1시간 54분 : 구상 2번(첫 번째 구상 30분, 두 번째 구상 25분) + 3번 제출(1차-23분, 2차-3분, 3차-4분)
1. 구상 : 처음에 구상을 잘못하여 구상하는데 시간을 오래 쏟았습니다(약 1시간).
2. 구현 : 구상 후 첫 구현까지는 약 23분이 걸렸습니다. 
3. 디버깅 : 총 7분 동안 두번 제출하며 디버깅 했습니다. 같은 로직이 반복되 복사-붙여넣기 후 코드를 일부 수정하였습니다. 
이 과정에서 미처 수정하지 못한 부분이 생겨 오탈자를 수정 하며 디버깅했습니다.

오늘은 구상에 많은 시간이 걸렸습니다. 이미 풀어본 문제였음에도 한 번에 구상하지 못한 부분은 반성해야할 것입니다.
하지만 첫 구상(30분)동안 구현하기 힘든 로직이란 것을 파악한 후 처음부터 다시 로직을 짠 점은 잘했다고 생각합니다.
첫 구상이 막힐 때 지난 번에 이도 저도 아닌 디버깅을 하며 시간 내 문제를 풀지 못한 점을 상기했습니다.
그 결과 오늘은 강사님이 말한 30분이 지난 후에도 구상을 완료하지 못하자 새로운 방식을 찾았습니다.
풀어본 문제였다는 점을 고려해서 다음번에는 더 빠르고 정확한 구상을 해야할 것입니다.

구현 과정은 구상에 맞추어 인덱스 범위를 꼼꼼히 확인하며 진행했습니다. 오늘 구현의 아쉬운 점은 구상을 잘 해놓고도
첫 제출에 통과하지 못했다는 점입니다. 중복된 로직이 존재해 하나를 만들고 다른 하나는 복사했습니다. 로직이 짧지 않기
때문에 복사하고 수정하는 과정에서 오탈자를 미처 발견하지 못한 부분이 발생했고 이는 추가 제출로 이어졌습니다.

시간이 정말 부족하지 않은 경우는 같은 로직이라도 다시 한 번 손으로 작성하는 습관을 들여야겠다고 생각하는 계기가 되었습니다.
이게 만약 본 시험이었다면 오탈자를 발견할 심적 여유가 없었을 것이라고 생각합니다. 오늘은 마음을 비우고 오탈자를
찾을 수 있었지만 현장에서는 그렇지 않을 것이라고 생각합니다.

<디버깅 포인트>
1. 오늘은 오탈자를 찾는게 포인트였습니다.
평소 변수명을 길게 쓰는 점은 많은 시간이 걸리지만 의미를 명확히 파악할 수 있어 오탈자를 금방 찾을 수 있었습니다.
하지만 이제 같은 로직이더라도 복사 붙여넣기 하지 않고 직접 다시 짜는 습관을 들여야 할 것입니다.

<기억할만 한 점>
1. 같은 로직이더라도 복사 붙여넣기 하지 않고 다시 손으로 구현하자
-> 현장에서는 틀린 부분 못 발견할 수도 있다. 

2. 구상 길어서 오래걸리는 것이 아니라 애매해서 30분 이상 넘어가는 경우 다시 짜자
-> 오늘은 지난 번 실수를 만회할 수 있었다
"""
def row_search(row):
    global answer
    global row_visited

    before_height = board[row][0]
    for i in range(1, N):
        now_height = board[row][i]

        #1) 같은 경우 넘어감
        if now_height == before_height:
            continue

        #2) 높이차가 2 이상인 경우 종료
        if abs(before_height - now_height) >= 2:
            return

        #3) 높이차가 1만큼 높아지면
        if now_height - before_height == 1:
            #(1) 레인지 확인
            if i - L < 0:
                return
            #(2) 경사로 설치할수 있는지 L만큼 확인
            l_count = 1
            while l_count <= L:
                #ㄱ. 방문 확인
                if row_visited[row][i - l_count] == 1:
                    return
                #ㄴ. 높이 같은지 확인
                if board[row][i - l_count] != before_height:
                    return
                #ㄷ. 방문 표시
                row_visited[row][i - l_count] = 1
                #ㄹ. 이전 블럭 방문
                l_count += 1

            #(3) 높이 변경
            before_height = now_height
            continue

        #4) 높이가 1만큼 낮아지면
        if now_height - before_height == -1:
            # (1) 레인지 확인
            if i - 1 + L >= N:
                return

            # (2) 경사로 설치할수 있는지 L만큼 확인
            l_count = 1
            while l_count <= L:
                # ㄴ. 높이 같은지 확인
                if board[row][i - 1 + l_count] != now_height:
                    return
                # ㄷ. 방문 표시
                row_visited[row][i - 1 + l_count] = 1
                # ㄹ. 다음 블럭 방문
                l_count += 1

            # (3) 높이 변경
            before_height = now_height

    answer += 1


def col_search(col):
    global answer
    global col_visited

    before_height = board[0][col]
    for i in range(1, N):
        now_height = board[i][col]

        # 1) 같은 경우 넘어감
        if now_height == before_height:
            continue

        # 2) 높이차가 2 이상인 경우 종료
        if abs(before_height - now_height) >= 2:
            return

        # 3) 높이차가 1만큼 높아지면
        if now_height - before_height == 1:
            # (1) 레인지 확인
            if i - L < 0:
                return
            # (2) 경사로 설치할수 있는지 L만큼 확인
            l_count = 1
            while l_count <= L:
                # ㄱ. 방문 확인
                if col_visited[i - l_count][col] == 1:
                    return
                # ㄴ. 높이 같은지 확인
                if board[i - l_count][col] != before_height:
                    return
                # ㄷ. 방문 표시
                col_visited[i - l_count][col] = 1
                # ㄹ. 이전 블럭 방문
                l_count += 1

            # (3) 높이 변경
            before_height = now_height
            continue

        # 4) 높이가 1만큼 낮아지면
        if now_height - before_height == -1:
            # (1) 레인지 확인
            if i - 1 + L >= N:
                return

            # (2) 경사로 설치할수 있는지 L만큼 확인
            l_count = 1
            while l_count <= L:
                # ㄴ. 높이 같은지 확인
                if board[i - 1 + l_count][col] != now_height:
                    return
                # ㄷ. 방문 표시
                col_visited[i - 1 + l_count][col] = 1
                # ㄹ. 다음 블럭 방문
                l_count += 1

            # (3) 높이 변경
            before_height = now_height

    answer += 1

#N : 보도 블럭의 크기 , L : 경사로의 길이
N, L = map(int, input().split())

board = []
for _ in range(N):
    board.append(list(map(int, input().split())))

row_visited = [[0 for _ in range(N)]for _ in range(N)]
col_visited = [[0 for _ in range(N)]for _ in range(N)]

answer = 0
for i in range(N):
    row_search(i)
    col_search(i)
print(answer)