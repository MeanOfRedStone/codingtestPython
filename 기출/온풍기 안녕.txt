def print2D(arr):
    for row in arr:
        print(row)

RIGHT_HEAT = [[0, 0, 0, 0, 0, 1, 0, 0, 0],
              [0, 0, 0, 0, 2, 1, 0, 0, 0],
              [0, 0, 0, 3, 2, 1, 0, 0, 0],
              [0, 0, 4, 3, 2, 1, 0, 0, 0],
              [0, 5, 4, 3, 2, 1, 0, 0, 0],
              [0, 0, 4, 3, 2, 1, 0, 0, 0],
              [0, 0, 0, 3, 2, 1, 0, 0, 0],
              [0, 0, 0, 0, 2, 1, 0, 0, 0],
              [0, 0, 0, 0, 0, 1, 0, 0, 0]]
DOWN_HEAT = list(map(list, zip(*RIGHT_HEAT[::-1])))
LEFT_HEAT = list(map(list, zip(*DOWN_HEAT[::-1])))
UP_HEAT = list(map(list, zip(*RIGHT_HEAT)))[::-1]

BLANK = 0
RIGHT = 1
LEFT = 2
UP = 3
DOWN = 4
THERM = 5


def check_therm():
    global heaters
    #[1] 바람 한 번씩 나옴
    for kind, r, c in heaters:
        heat_room(kind, r, c)
    print("온풍기 끝")
    for row in board_therm:
        print(row)

    #[2] 온도 조절
    heat_pos = []
    for i in range(R):
        for j in range(C):
            heat = board_therm[i][j]
            for dx, dy in ((1, 0), (0, 1)):
                ni, nj = i + dx, j + dy
                if ni < 0 or ni == R or nj < 0 or nj == C:
                    continue
                #벽 체크 -> 틀린다면 디버깅 포인트
                if dx == 1 and wall_check[(ni, nj)] == 0:
                    continue
                if dy == 1 and wall_check[(i, j)] == 1:
                    continue

                n_heat = board_therm[ni][nj]
                if heat > n_heat:
                    diff = (heat - n_heat) // 4
                    heat_pos.append((-diff, i, j))
                    heat_pos.append((diff, ni, nj))
                    continue
                if heat < n_heat:
                    diff = (n_heat - heat) // 4
                    heat_pos.append((diff, i, j))
                    heat_pos.append((-diff, ni, nj))

    for heat, r, c in heat_pos:
        board_therm[r][c] += heat
        if board_therm[r][c] < 0:
            board_therm[r][c] = 0
    print("온도 섞임")
    for row in board_therm:
        print(row)
    #[3] 가장 바깥쪽 부분 온도 1씩 감소
    #2. 온도 감소
    for col_idx in range(C):
        board_therm[0][col_idx] -= 1
        if board_therm[0][col_idx] < 0:
            board_therm[0][col_idx] = 0
        board_therm[R - 1][col_idx] -= 1
        if board_therm[R - 1][col_idx] < 0:
            board_therm[R - 1][col_idx] = 0

    for row_idx in range(1, R - 1):
        board_therm[row_idx][0] -= 1
        if board_therm[row_idx][0] < 0:
            board_therm[row_idx][0] = 0
        board_therm[row_idx][C - 1] -= 1
        if board_therm[row_idx][C - 1] < 0:
            board_therm[row_idx][C - 1] = 0
    print("바깥쪽 감소")
    for row in board_therm:
        print(row)
    # exit()
    #[4] 조사하는 모든 칸 온도 K 이상인지 조사
    is_all_pass = True
    for r, c in inspect:
        if board_therm[r][c] < K:
            is_all_pass = False
            break

    if is_all_pass:
        return True
    return False


def heat_room(kind, r, c):
    hr, hc = r, c
    if kind == RIGHT:
        hr -= 4
        for i in range(9):
            for j in range(9):
                tr, tc = hr + i, hc + j
                # 1) 인덱스 체크
                if tr < 0 or tr >= R or tc < 0 or tc >= C:
                    continue
                # 2) 온도가 올라가지 않는 곳이면 제외
                if RIGHT_HEAT[i][j] == 0:
                    continue
                # 4) 벽 체크 -> 3방향 필요
                is_pass = False
                # (1) 왼쪽 위에서 오는 공기(인덱스 및 열 확인)
                if i - 1 >= 0 and RIGHT_HEAT[i - 1][j - 1] > 0:
                    if wall_check[(tr, tc - 1)] != 1 and wall_check[(tr, tc - 1)] != 0:
                        is_pass = True
                # (2) 왼쪽에서 오는 공기
                if wall_check[(tr , tc - 1)] == -1:
                    is_pass = True
                # (3) 왼쪽 아래에서 오는 공기
                if i + 1 < 9 and RIGHT_HEAT[i + 1][j - 1] > 0:
                    if wall_check[(tr + 1, tc - 1)] != 0 and wall_check[(tr, tc - 1)] != 1:
                        is_pass = True
                # 5) 온도 상승
                if is_pass:
                    board_therm[tr][tc] += RIGHT_HEAT[i][j]
        return

    if kind == LEFT:
        hr -= 4
        hc -= 8

        for i in range(9):
            for j in range(9):
                tr, tc = hr + i, hc + j
                # 1) 인덱스 체크
                if tr < 0 or tr >= R or tc < 0 or tc >= C:
                    continue
                # 2) 온도가 올라가지 않는 곳이면 제외
                if LEFT_HEAT[i][j] == 0:
                    continue
                # 4) 벽 체크 -> 3방향 필요
                is_pass = False
                # (1) 오른쪽 위에서 오는 공기(인덱스 및 열 확인)
                if i - 1 >= 0 and LEFT_HEAT[i - 1][j + 1] > 0:
                    if wall_check[(tr, tc)] != 1 and wall_check[(tr, tc + 1)] != 0:
                        is_pass = False
                # (2) 오른쪽에서 오는 공기
                if wall_check[(tr , tc)] == -1:
                    is_pass = True
                # (3) 오른쪽 아래에서 오는 공기
                if i + 1 < 9 and LEFT_HEAT[i + 1][j + 1] > 0:
                    if wall_check[(tr, tc)] != 1 and wall_check[(tr + 1, tc + 1)] != 0:
                        is_pass = True
                # 5) 온도 상승
                if is_pass:
                    board_therm[tr][tc] += LEFT_HEAT[i][j]
        return

    if kind == UP:
        hr -= 8
        hc -= 4

        for i in range(9):
            for j in range(9):
                tr, tc = hr + i, hc + j
                # 1) 인덱스 체크
                if tr < 0 or tr >= R or tc < 0 or tc >= C:
                    continue
                # 2) 온도가 올라가지 않는 곳이면 제외
                if UP_HEAT[i][j] == 0:
                    continue
                # 4) 벽 체크 -> 3방향 필요
                is_pass = False
                # (1) 왼쪽 아래에서 오는 공기(인덱스 및 열 확인)
                if j - 1 >= 0 and UP_HEAT[i + 1][j - 1] > 0:
                    if wall_check[(tr + 1, tc)] != 0 and wall_check[(tr + 1, tc - 1)] != 1:
                        is_pass = True
                # (2) 아래에서 오는 공기
                if wall_check[(tr + 1, tc)] == -1:
                    is_pass = True
                # (3) 오른쪽 아래에서 오는 공기
                if j + 1 < 9 and UP_HEAT[i + 1][j + 1] > 0:
                    if wall_check[(tr + 1, tc)] != 0 and wall_check[(tr + 1, tc)] != 1:
                        is_pass = True
                # 5) 온도 상승
                if is_pass:
                    board_therm[tr][tc] += UP_HEAT[i][j]
        return

    if kind == DOWN:
        hc -= 4
        for i in range(9):
            for j in range(9):
                tr, tc = hr + i, hc + j
                # 1) 인덱스 체크
                if tr < 0 or tr >= R or tc < 0 or tc >= C:
                    continue
                # 2) 온도가 올라가지 않는 곳이면 제외
                if DOWN_HEAT[i][j] == 0:
                    continue
                # 4) 벽 체크 -> 3방향 필요
                is_pass = False
                # (1) 왼쪽 위에서 오는 공기(인덱스 및 열 확인)
                if j - 1 >= 0 and DOWN_HEAT[i - 1][j - 1] > 0:
                    if wall_check[(tr - 1, tc - 1)] != 1 and wall_check[(tr, tc)] != 0:
                        is_pass = True
                # (2) 위에서 오는 공기
                if wall_check[(tr, tc)] == -1:
                    is_pass = True
                # (3) 오른쪽 위에서 오는 공기
                if j + 1 < 9 and DOWN_HEAT[i - 1][j + 1] > 0:
                    if wall_check[(tr - 1, tc)] != 1 and wall_check[(tr, tc)] != 0:
                        is_pass = True
                # 5) 온도 상승
                if is_pass:
                    board_therm[tr][tc] += DOWN_HEAT[i][j]
        return




R, C, K = map(int, input().split())

# 0 : 빈 칸, 1 : 오른쪽 방향 온풍기, 2 : 왼쪽 방향 온풍기, 3 : 위쪽 방향 온풍기, 4: 아래쪽 방향 온풍기, 5 : 온도를 조사해야 하는 칸
board = []
for _ in range(R):
    board.append(list(map(int, input().split())))

heaters = []
inspect = []
for i in range(R):
    for j in range(C):
        if BLANK < board[i][j] < THERM:
            heaters.append((board[i][j], i, j))
            continue
        if board[i][j] == THERM:
            inspect.append((i, j))
board_therm = [[0 for _ in range(C)]for _ in range(R)]

W = int(input())
# t : 0 윗 행과 사이에 벽 , t : 1 오른쪽과 사이에 벽
wall_check = {}
for i in range(9):
    for j in range(9):
        wall_check[(i, j)] = -1
for _ in range(W):
    x, y, t= map(int, input().split())
    x, y = x - 1, y - 1
    wall_check[(x, y)] = t

is_finished = False
answer = 0
for choco in range(1, 101):
    answer = choco
    if check_therm():
        is_finished = True
        break
if is_finished:
    print(answer)
if not is_finished:
    print(101)