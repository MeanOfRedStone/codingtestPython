"""
<디버깅 포인트>
1. 중간 중간 구상한 로직대로 작동하는지 print해가며 진행했습니다.

<풀이 과정>
1차 풀이(성공, 59분 소요)

오늘 문제는 문제의 정보를 얼마나 빨리 정리하고 구현할 수 있는지가 포인트였던 것 같습니다.
정리할 정보가 많기 때문에 자료구조를 여러개 써도 시간 복잡도가 남아 구현하는데 큰 어려움은 없었다고 생각합니다.
평소 제가 중점을 두며 연습한 스타일과 운 좋게 잘 맞아 떨어졌던 문제였습니다.
어제 문제는 매우 지저분하게 시간을 초과해 풀었습니다.
비록 오늘 잘 풀었지만 널뛰기 하는 풀이 결과는 주의 또 주의 또 주의 해야할 것입니다.

총 풀이 과정은 다음과 같습니다.
1. 문제 정보 정리
2. 핵심 로직 정리 및 알고리즘 구상
3. 구현한 알고리즘을 수도코드로 옮기는 과정
  1) 시간복잡도를 계산하며 사용할 자료구조 선택 - deque, dictionary 선택
4. 수도코드 구현 및 중간 중간 로직 확인

정보 정리와 알고리즘 구상은 성실하게 진행하면 되는 부분이었기 때문에 크게 기억에 남지 않습니다.
오늘 기억에 남는 점은 딕셔너리 자료구조를 본격적으로 활용해 보았다는 점입니다.
한 위치에 두 개 이상의 파이어볼을 기록하기 위에 어떤 자료구조를 사용할 까 고민했습니다.
오늘은 시간 복잡도가 널널하였기 때문에 딕셔너리에 2차원 배열의 좌표 값을 키 값으로 활용하기로 결정했습니다.
이리 저리 파이썬으로 딕셔너리를 사용해보며 자료구조 사용법을 정리하고 수도코드를 완성했습니다.
시간 복잡도가 널널했기 때문에 pop, append를 무리 없이 사용할 수 있었습니다.
자료 구조의 사용까지 정한 뒤 수도 코드를 모두 정리했고 무리 없이 문제를 맞출 수 있었습니다.

저보다 먼저 제출한 분들은 속도가 제 코드보다 더 빠른 것을 확인했습니다.
코드 리뷰를 진행하며 어떤 식으로 처리하여 저보다 빠른 결과값이 나왔는지 검토, 리팩토링 해봐야할 것 같습니다.

<기록할 만 한 점>
1. 딕셔너리 사용 법 기억해놓자

2. 시간 복잡도가 널널하더라도 더 줄이는 방법 평소에 고민하자
-> 답은 맞추나 시간 복잡도가 터지는 것이 내 단점이다
"""


from collections import deque

move = [(-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)]
def move_fire_balls():
    global fire_balls

    #[0] 사용할 자료구조
    before_sum = {}
    for i in range(N):
        for j in range(N):
            before_sum[(i, j)] = []

    #[1] K번 동안 이동 로직을 반복한다
    for _ in range(K):
        #[2] 각 파이어 볼의 정보만큼 이동
        while fire_balls:
            #1. 볼정보
            r, c, m, s, d = fire_balls.popleft()

            #2. 이동 정보 및 이동
            dx, dy = move[d]
            nr, nc = (r + dx * s) % N, (c + dy * s) % N

            #3. before_sum에 삽입
            before_sum[(nr, nc)].append((m , s, d))

        #[3] 파이어볼 정보 계산
        for i in range(N):
            for j in range(N):
                #0. 해당 위치의 파이어볼 수
                f_cnt = len(before_sum[(i, j)])
                #1. 해당 좌표에 있는 파이어볼이 하나인 경우 fire_balls에 다시 넣어줌
                if f_cnt == 1:
                    m, s, d = before_sum[(i, j)].pop()
                    fire_balls.append((i, j, m, s, d))
                    continue

                #2. 해당 좌표에 있는 파이어 볼이 두 개 이상인 경우
                if f_cnt >= 2:
                    #1) 먼저 하나로 합쳐준다
                    m_sum = 0
                    s_sum = 0
                    d_odd = False
                    d_even = False
                    while before_sum[(i, j)]:
                        m, s, d = before_sum[(i, j)].pop()
                        m_sum += m
                        s_sum += s
                        if d % 2 == 0:
                            d_even = True
                        if d % 2 != 0:
                            d_odd = True

                    #2) 제약 1 m_sum // 5가 0이면 넘어간다
                    if m_sum // 5 == 0:
                        continue

                    n_d_lst = []
                    #3) 방향 확인
                    if d_odd and d_even:
                        n_d_lst = [1, 3, 5, 7]
                    else:
                        n_d_lst = [0, 2, 4, 6]
                    n_m = m_sum // 5
                    n_s = s_sum // f_cnt
                    for next_fireball in range(4):
                        n_d = n_d_lst[next_fireball]
                        fire_balls.append((i, j , n_m, n_s, n_d))


def sum_fire_balls():
    m_sum = 0

    for r, c, m , s, d in fire_balls:
        m_sum += m

    return m_sum





N, M, K = map(int, input().split())

fire_balls = deque()
# 초기 파이어볼의 수
for _ in range(M):
    r, c, m, s, d = map(int, input().split())
    fire_balls.append((r, c, m, s, d))

move_fire_balls()
answer = sum_fire_balls()

print(answer)