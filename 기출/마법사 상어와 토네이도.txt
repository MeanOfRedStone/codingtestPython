"""
<풀이 과정>
*총 풀이시간 85분 ( 로직 1(토네이도 회전) 총 36분 :구상(27분) , 구현 (9분), 로직 2(모래 이동) 총 49분 : 구상(36분), 구현(9분), 최종 확인(4분)
1. 오늘은 구상과 구현을 2 파트로 나누어 진행했습니다.
큰 로직 단위로 나누어 구상 구현을 진행하는 것도 나쁘지 않은 것 같다고 생각합니다.
왜냐하면 자료 구조 사용 등 한 번에 모든 로직을 짜기 힘들 때도 있기 때문입니다. 앞으로도 이러한 방식을 전략 중 하나로
세워도 나쁘지 않을 것이라 생각합니다.

첫 번째 토네이도 회전입니다.
이전에 비슷한 문제를 풀며 강사님께서 강조하신 부분이었습니다. 안쪽에서부터 돌아가는 로직은 저번에도 어렵지 않기 때문에
쉽게 구상하고 수현할 수 있었습니다.

두 번째 모래의 이동입니다.
이 부분은 구상이 어렵진 않았는데 구현을 깔끔하게 일반화하지 못할 것 같아 룩업 테이블을 만들었습니다.
총 120개의 값을 참조해야했기 때문에 이 부분을 신중하게 구상하는 데 매우 오랜 시간이 걸렸습니다.
해당 부분 또한 일반화 할 수 있는 방식을 조금 더 고민해보고 리팩토링 해야할 것입니다.

2. 모래의 이동은 사실 중간 중간 확인하며 진행하지 않고 테스트 케이스로 확인했습니다.
제 방법론 중 하나가 신중하게 하는 것인데 이러한 부분에서 어떻게 할지 고민해 놓고 미리 전략으로 세워놓아야 할 것입니다.

<기억해 둘만한 점>
1. 룩업 테이블 확인 방법
2. 큰 로직 단위로 나누어서 구상하는 것 고려해보자

"""



direction = [(0, -1), (1, 0), (0, 1), (-1, 0)]

def tornado():
    r, c = N // 2, N // 2
    d_idx = 0
    #[1] 1 ~ N-2 거리까지 토네이도 이동은 2번씩
    for distance in range(1, N - 1):
        #1. 2번씩 이동한다
        move_cnt = 1
        while move_cnt <= 2:
            #1) 방향 설정
            dx, dy = direction[d_idx]
            #2) 해당 차례의 거리만큼 이동
            for _ in range(distance):
                #(1) 모래의 이동 -> 토네이도가 한 칸 이동할때마다 모래는 이동한다
                move_sand(r, c, dx, dy, d_idx)
                #(2) 토네이도의 이동
                r += dx
                c += dy
            #3) 해당 차례만큼 이동했으면 토네이도 방향 회전
            d_idx = (d_idx + 1) % 4
            #4) 다음 차례로 이동
            move_cnt += 1

    #[2] N - 1의 거리는 3번 이동한다
    move_cnt = 1
    while move_cnt <= 3:
        # 1) 방향 설정
        dx, dy = direction[d_idx]
        # 2) 해당 차례의 거리만큼 이동
        for _ in range(N - 1):
            # (1) 모래의 이동 -> 토네이도가 한 칸 이동할때마다 모래는 이동한다
            move_sand(r, c, dx, dy, d_idx)
            # (2) 토네이도의 이동
            r += dx
            c += dy
        # 3) 해당 차례만큼 이동했으면 토네이도 방향 회전
        d_idx = (d_idx + 1) % 4
        # 4) 다음 차례로 이동
        move_cnt += 1


sand_info = [[(-1, 1, 0.01), (1, 1, 0.01), (-2, 0, 0.02), (2, 0, 0.02), (0, -2, 0.05), (-1, 0, 0.07), (1, 0, 0.07), (-1, -1, 0.1), (1, -1, 0.1), (0, -1, -1)],
             [(-1, -1, 0.01), (-1, 1, 0.01), (0, -2, 0.02), (0, 2, 0.02), (2, 0, 0.05), (0, -1, 0.07),(0, 1, 0.07), (1, -1, 0.1), (1, 1, 0.1), (1, 0, -1)],
             [(-1, -1, 0.01), (1, -1, 0.01), (-2, 0, 0.02), (2, 0, 0.02), (0, 2, 0.05), (-1, 0, 0.07), (1, 0, 0.07), (-1, 1, 0.1), (1, 1, 0.1), (0, 1, -1)],
             [(1, -1, 0.01), (1, 1, 0.01), (0, -2, 0.02), (0, 2, 0.02), (-2, 0, 0.05), (0, -1, 0.07),(0, 1, 0.07), (-1, -1, 0.1), (-1, 1, 0.1), (-1, 0, -1)]]


def move_sand(r, c, dx, dy, d_idx):
    global board
    global answer

    #[1] y의 모래
    yr, yc = r + dx, c + dy
    y_sand = board[yr][yc]

    move_sand = 0
    #[2] y_sand를 비율이 적힌 칸으로 이동
    info = sand_info[d_idx]
    for i in range(len(info) - 1):
        dx2, dy2, ratio = info[i]
        #1. 비율이 적힌 곳의 위치
        s_dx, s_dy = dx + dx2, dy + dy2
        sr, sc = r + s_dx, c + s_dy

        #2. 인덱스가 벗어나면 -> 정답에 모래 더해줌
        if sr < 0 or sr >= N or sc < 0 or sc >= N:
            answer += int(y_sand * ratio)
            move_sand += int(y_sand * ratio)
            continue

        #2-2. 인덱스가 벗어나지 않으면 -> 해당 위치에
        board[sr][sc] += int(y_sand * ratio)
        move_sand += int(y_sand * ratio)

    #[3] a로 모래 이동
    #1. 이동 양
    a_sand = y_sand - move_sand
    #2. 이동 위치
    dx2, dy2, ration = info[len(info) - 1]
    ar, ac = r + dx + dx2, c + dy + dy2
    #3. 인덱스 벗어나면 -> 정답에 더해줌
    if ar < 0 or ar == N or ac < 0 or ac == N:
        answer += a_sand
        return
    #3-2. 인덱스 안이라면 -> 해당 위치에
    board[ar][ac] += a_sand

N = int(input())
board = []
for _ in range(N):
    board.append(list(map(int, input().split())))

answer = 0
tornado()
print(answer)