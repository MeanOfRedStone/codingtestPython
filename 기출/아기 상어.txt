"""
<풀이 과정>
* 총 64분 - 구상(26분) 구현(20분) 디버깅(18분)
오늘은 구상 과정은 특별할 것이 없었습니다. 최소 거리를 찾으라는 것을 보고
bfs 를 통해 (시간, 행, 열) 객체를 담은 리스트를 반환받아 정렬하면 해결할 수
있다고 생각했습니다. 시간 복잡도도 약 N * N의 배열을 약 (N * N)번이 될 것이라 생각해
별다른 어려운 점이 예측되지 않았습니다. 구현도 이에 맞추어 쉽게 진행할 수 있었습니다.

반면 문법실수와 자잘한 조건을 놓쳤습니다. 먼저 문법 실수로 .sort() 사용시 오름차순 내림차순
을 헷갈려 이를 print해보고 수정했습니다. 또한 그래도 값이 나오지 않자 물고기의 섭취 시
해당 자리를 비워줘야 하는 점을 한 번 수정했습니다. 두 번째로도 답이 나오지 않자 상어의 초기
위치를 기입한 뒤 비워줬습니다. 물고기 위치는 적어놨기 때문에 쉽게 생각할 수 있었습니다. 반면
상어의 기호도 크기처럼 사용될 수 있다는 점은 시간이 걸려 파악할 수 있었습니다.

<기억할만 한점>
1. sort() 문법 기본이 오름차순이다 기억해놓자

2. 조건 처리 좀더 신경 쓰자
"""

from collections import deque


def find_shark():
    global board

    for i in range(N):
        for j in range(N):
            if board[i][j] == 9:
                board[i][j] = 0
                return i, j

def find_food(sr, sc):
    #[1] 초기 설정
    queue = deque()
    visited = [[0 for _ in range(N)]for _ in range(N)]
    food_lst = []
    # min_time = 401
    #[2] 최초 방문
    visited[sr][sc] = 1
    queue.append((sr, sc))
    #[3] 상어 이동
    while queue:
        r, c = queue.popleft()
        time = visited[r][c]
        #1. 만약 해당 위치에 있는 물고기의 크기가 상어보다 작고 섭취 시간이 min_time보다 적으면 food_lst에 넣어줌
        if 0 < board[r][c] < s_weight:
            food_lst.append((r, c, time - 1))
        # #2. 만약 물고기의 크기가 상어보다 작고 섭취 시간이 min_time보다 크다면 종료
        # if 0 < board[r][c] < s_weight and time > min_time:
        #     return food_lst
        #3. 다음 탐색
        for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):
            nr, nc = r + dx, c + dy
            #1) 레인지 확인
            if nr < 0 or nr == N or nc < 0 or nc == N:
                continue
            #2) 방문 확인
            if visited[nr][nc] != 0:
                continue
            #3) 물고기 크기 확인
            if board[nr][nc] > s_weight:
                continue
            #4) 방문 표시 및 큐 삽입
            visited[nr][nc] = time + 1
            queue.append((nr, nc))

    #[4] 탐색 끝
    return food_lst

N = int(input())
# 0 : 빈 칸 | 1 ~ 6 : 칸에 있는 물고기의 크기 | 9 : 아기 상어의 위치
board = []
for _ in range(N):
    board.append(list(map(int, input().split())))

#[0] 상어 위치
sr, sc = find_shark()

s_weight = 2
s_eat = 0
total_time = 0

#[1] 물고기 먹을 수 있을 때까지 찾음
while True:
    #[2] 먹을 수 있는 물고기 찾아줌
    food_lst = find_food(sr, sc)
    food_len = len(food_lst)
    #[3] 먹을 수 있는 물고기의 수
    #1. 0이라면 종료
    if food_len == 0:
        break
    #2. 1이라면 해당 물고기 섭취
    if food_len == 1:
        r, c, time = food_lst[0]
        #1) 시간 증가
        total_time += time
        #2) 섭취량 증가
        s_eat += 1
        #3) 물고기 삭제
        board[r][c] = 0
        sr, sc = r, c
    #3. 1보다 크다면
    if food_len > 1:
        #1) r,c 적은 순으로 섭취
        food_lst.sort(key = lambda x : (x[2], x[0], x[1]))
        r, c, time = food_lst[0]
        #2) 시간 증가
        total_time += time
        #3) 섭취량 증가
        s_eat += 1
        # 3) 물고기 삭제
        board[r][c] = 0
        sr, sc = r, c
    #[4] 자기 체중만큼 고기 섭취하면 크기 증가
    if s_weight == s_eat:
        s_weight += 1
        s_eat = 0

print(total_time)