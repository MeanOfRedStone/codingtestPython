"""
<디버깅 포인트>
1. 중간 중간 제가 그린 로직대로 코드가 구현되는지 확인하면서 진행했습니다.
-> 시간은 오래걸렸지만 케이스별로 실수 없이 진행할 수 있었습니다.

<풀이 과정>
*1차 제출(정답, 총 풀이 시간 43분)
1. 주사위 굴리기 문제는 이전에 풀어봤던 문제이고 풀이 과정이 특이해 기억에 남았습니다.

2. 주사위를 굴렸을 때 진행 과정을 잘 기록해 구현했습니다.

3. 주사위가 굴러가는 과정은 전개도를 움직이는 방향으로 구현했습니다. 이전에 전개도를 직접 그려가며 구현해보았습니다.
이 경험 덕분에 이번에는 빨리 진행 과정을 파악하고 구현할 수 있었던 것 같습니다.

총평) 주사위 굴리기 문제는 이전에 2시간동안 4번 제출하여 맞춘 문제였습니다. 이번에는 풀이시간이 41으로 줄었고 한 번만에 맞추었습니다.
아는 문제가 나와서 쉽게 풀었습니다. 하지만 저번 주에 시간 내에 문제를 못 풀었던 사실을 잊지 않고 더욱 분발해야할 것입니다.

<기억할 만한 점>
1. 파이썬에서 회전 문제 -> 슬라이싱을 활용하자
이전에 자바에서 구현할 때는 값을 바꾸는 것으로 해결했습니다.
하지만 이번에는 파이썬의 간편한 슬라이싱 기능을 사용해 주사위를 손쉽게 회전했습니다.
"""


def move_board(i, j, move_idx):
    if move_idx == 1:
        if j + 1 == M:
            return i, j, False
        return i, j + 1, True

    if move_idx == 2:
        if j - 1 < 0:
            return i, j, False
        return i, j - 1, True

    if move_idx == 3:
        if i - 1 < 0:
            return i, j, False
        return i - 1, j, True

    if move_idx == 4:
        if i + 1 == N:
            return i, j, False
        return i + 1, j, True


def move_dice(d_idx):
    global dice
    #동쪽으로 굴리는 경우
    if d_idx == 1:
        dice[1] = dice[1][1:] + dice[1][:1]
        return
    if d_idx == 2:
        dice[1] = dice[1][-1:] + dice[1][:-1]
        return
    if d_idx == 3:
        temp = dice[2][1]
        temp2 = dice[1][3]
        dice[2][1] = dice[1][1]
        dice[1][1] = dice[0][1]
        dice[0][1] = temp2
        dice[1][3] = temp
        return
    if d_idx == 4:
        temp = dice[0][1]
        temp2 = dice[1][3]
        dice[0][1] = dice[1][1]
        dice[1][1] = dice[2][1]
        dice[2][1] = temp2
        dice[1][3] = temp
        return

def change_number(r, c):
    global dice
    global board

    dice_number = dice[1][1]
    board_number = board[r][c]

    if board_number == 0:
        board[r][c] = dice_number
        return

    if board_number != 0:
        dice[1][1] = board_number
        board[r][c] = 0
        return

#동 서 북 남
direction = [(-1, -1), (0, 1), (0, -1), (-1, 0), (1, 0)]
# 말판의 크기 (N, M)
# 정육면체의 처음 위치(X, Y)
# 주사위 굴리는 횟수 (K)
N, M, X, Y, K = map(int, input().split())

board = []
for _ in range(N):
    board.append(list(map(int, input().split())))

dice = [[0 for _ in range(4)]for _ in range(3)]
#보드의 범위 벗어나는 경우 무시하고 출력하지 않는다
move_idxes = list(map(int, input().split()))
r, c = X, Y
for i in range(K):
    move_idx = move_idxes[i]
    nr, nc, is_move = move_board(r, c, move_idx)
    r, c = nr, nc
    if is_move:
        move_dice(move_idx)
        change_number(r, c)
        print(dice[1][3])