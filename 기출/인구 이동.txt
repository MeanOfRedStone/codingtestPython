"""
<풀이과정>
*총 풀이 시간 40분 : 구상(20분) 구현(20분)
1. 구상과 구현 모두 무난한 문제였습니다. 다만 구상 과정에서 어제 드래곤 커브에서 실수한
런타임 에러를 만회하기 위해 조건을 명시하고 진행했습니다. 어제의 실수를 방지하기 위해
노력한 점은 잘했다고 생각합니다.

2. 이후 디버깅 없이 구상대로 구현하고 제출할 수 있었습니다. 오늘 오전은 모두 골드 4
문제였기 때문에 가능했다고 생각합니다.

<기억할만 한 점>
1. 조건 명시 한 것 잘했다
"""


from collections import deque

def find_eggs(si, sj):
    global visited
    global total_eggs

    queue = deque()
    visited[si][sj] = 1
    queue.append((si, sj))

    eggs_seperate = []
    eggs_seperate.append((si, sj, board[si][sj]))
    is_moveable = False

    while queue:
        r, c = queue.popleft()
        egg_count = board[r][c]
        for dx, dy in ((0, 1), (1, 0), (0, -1), (-1, 0)):
            nr, nc = r + dx, c + dy

            #0. 레인지 체크
            if nr < 0 or nr == N or nc < 0 or nc == N:
                continue
            #1. 방문 확인
            if visited[nr][nc] == 1:
                continue
            #2. 이동할 수 있는 계란인지 확인 -> 차이가 L 이상 R 이하여야함
            n_egg_count = board[nr][nc]
            if L <= abs(egg_count - n_egg_count) <= R:
                #1) 움직일 수 있음
                is_moveable = True
                #2) 방문 표시
                visited[nr][nc] = 1
                #3) 다음 탐색을 위한 큐 삽입
                queue.append((nr, nc))
                #4) 분리 대상에 포함
                eggs_seperate.append((nr, nc, n_egg_count))

    if is_moveable:
        total_eggs.append(eggs_seperate)


def move_eggs():
    global board

    for eggs in total_eggs:
        #[1] 분리할 계란의 개수를 구함
        total_egg_counts = 0
        for r, c, egg_counts in eggs:
            total_egg_counts += egg_counts
        after_seperate_eggs = total_egg_counts // len(eggs)
        #[2] 계란 분리
        for r, c, egg_counts in eggs:
            board[r][c] = after_seperate_eggs


# 총 칸의 크기 : N | 계란 이동 범위의 최솟값 : L | 계란 이동 범위의 최댓값 : R
N, L, R = map(int, input().split())

board = []
for _ in range(N):
    board.append(list(map(int, input().split())))

move_counts = 0
#[1]이동이 필요없을 때까지 반복
while True:
    visited = [[0 for _ in range(N)]for _ in range(N)]
    total_eggs = []

    #[2] 합쳐질 계란 total_eggs에 삽입
    for i in range(N):
        for j in range(N):
            if visited[i][j] == 0:
                find_eggs(i, j)

    #[3] total_eggs의 길이 0이면 break
    if not total_eggs:
        break

    #[4] 계란 합치고 분리
    move_eggs()
    move_counts += 1

print(move_counts)