"""
<풀이 과정>
1. 24시간 이상 걸려 제출 성공했습니다.
코드 트리 정답까지 66분
코드 트리를 첫 제출에 성공해 백준도 성공일 것이라 제출했지만 성공하지 못했습니다.
이후 60분 정도 디버깅을 진행했습니다. 디버깅을 실패한 뒤 마감까지 40분을 남겨놓고 새로운 방식을 택했습니다.

새로운 방식은 결과적으로 실패했습니다. 더 중요한 건 새롭게 밀어보는 것을 시도했지만 제출하지 못했다는 것입니다.
너무 짧은 시간만을 남겨놓고 새로 시작했기 때문입니다. 최소 1시간은 남겨놓고 새로운 방식을 택해야할 것입니다.

이후 구상을 2번 정도 더 구현하며 최종적으로 백준까지 제출에 성공했습니다.

제출 과정을 하며 바꾼 방식은 다음과 같습니다. 3000ms를 통과해야 줄어드는 것을 확인해 이를 목표로 조금씩 방법을 바꿨습니다.
바이러스를 어떻게 관리하는지 자료구조 사용 방식을 변형하는게 아래 내용의 핵심입니다.
1. 1차원 배열 사용(최소 4000ms)
2. 2차원 배열로 관리(최소 4000ms)
-------------------------------------// 여기 까지가 시간 내에 생각했던 방식입니다.
3. heapq로 관리(최소 3200ms)까지 줄임
4. deque를 사용해(최소 1113ms)까지 줄임 -> 통과

deque 자료구조는 사실 2차원 배열로 관리하며 가장 처음 생각했던 방식 중 하나입니다.
하지만 '더블 엔디드 큐'가 아니라 '큐'처럼 매번 사용하다 보니 자연스럽게 뒤로 넣는 것만 시간 복잡도가 O(1) 이고
앞 쪽에 넣는 것은 O(N)이 나올 것이라 생각해 구상을 마친 뒤 결국 사용하지 않았습니다.

이번 기회에 heapq나 deque같은 자료구조의 시간 복잡도를 정확히 알아 놓아야할 것 같습니다.


<디버깅 포인트>
1 로직상 디버깅 포인트는 없었고 자료구조의 변형을 계속 가져갔습니다.
->늘 비슷한 자료구조만 사용하다보니 유연하게 사용하지 못하는 점이 단점인 것 같습니다.

<기억할만한 점>
1. 새롭게 풀거면 최소 1시간은 남기자!..
2. 자료 구조 익히자 이제는!
  1) deque -> 더블 엔디드 큐다!
  2) heapq -> 사용법 기억해놓자(혹시 모르니깐)
"""


from collections import deque


def viruses_cycle():
    global viruses
    global board

    cycle = 1
    while cycle <= K:
        #[1] 바이러스 본인이 속한 칸의 양분 섭취 || 불가능할 경우 죽음
        for i in range(N):
            for j in range(N):
                block = viruses[i][j]
                #1. 바이러스가 없는 칸의 경우 넘어간다
                if len(block) == 0:
                    board[i][j] += nutrition[i][j]
                    continue
                #2. 바이러스가 있는 칸의 경우 양분 섭취 및 죽음 판별
                nutri = 0
                block_len = len(block)
                block_cnt = 1
                alive = []
                while block_cnt <= block_len:
                    va = block.popleft()
                    #1) 양분 섭취 가능한 경우
                    if board[i][j] >= va:
                        #(1) 양분의 흡수
                        board[i][j] -= va
                        #(2) 나이 증가
                        va += 1
                        #(3) 다시 큐에 넣어줌
                        viruses[i][j].append(va)
                        #(4) 다음 바이러스로
                        block_cnt += 1
                        continue
                    #2) 양분 섭취 불가능한 경우
                    nutri += va // 2
                    block_cnt += 1

                #3. 죽은 바이러스가 있는 경우 해당 영양분만큼 더해준다
                board[i][j] += (nutri + nutrition[i][j])

        #[2] 번식
        for i in range(N):
            for j in range(N):
                block = viruses[i][j]
                len_block = len(block)
                if len_block == 0:
                    continue
                for b_idx in range(len_block):
                    va = block[b_idx]
                    #1) 제약 조건 나이 5의 배수 아니면 넘어간다
                    if va % 5 != 0:
                        continue
                    #2) 8방 탐색
                    for dx, dy in ((-1, 0), (-1, 1), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1)):
                        ni, nj = i + dx, j + dy
                        #(1) 인덱스 확인
                        if ni < 0 or ni == N or nj < 0 or nj == N:
                            continue
                        viruses[ni][nj].appendleft(1)
        cycle += 1

N, M, K = map(int, input().split())
nutrition = []
for _ in range(N) :
    nutrition.append(list(map(int, input().split())))

viruses = [[deque() for _ in range(N)]for _ in range(N)]
for _ in range(M):
    vr, vc, va = map(int, input().split())
    viruses[vr - 1][vc - 1].append(va)

board = [[5 for _ in range(N)]for _ in range(N)]

viruses_cycle()

virus_count = 0
for i in range(N):
    for j in range(N):
        virus_count += len(viruses[i][j])
print(virus_count)