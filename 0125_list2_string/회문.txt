def solve(board):
    global palindrome_count
    global N
    # 가로 방향으로 N길이만큼 단어를 list에 넣어 회문인지를 완전탐색함
    for i in range(8):
        for j in range(8 - N + 1):
            palindrome = []
            for k in range(N):
                palindrome.append(board[i][j + k])
            is_palindrome = check_palindrome(palindrome)
            if is_palindrome :
                palindrome_count += 1

def check_palindrome(palindrome):
    # 앞과 뒤의 인덱스를 설정하여 하나하나 비교함
    index = 0
    last_index = len(palindrome) - 1
    is_palindrome = True
    while index < last_index:
        front_character = palindrome[index]
        back_character = palindrome[last_index]
        if front_character != back_character:
            is_palindrome = False
            break
        index += 1
        last_index -= 1

    return is_palindrome


board = []
N = 0
palindrome_count = 0
answers = []

for tc in range(10):
    # 회문의 길이
    N = int(input())
    board = []
    for i in range(8):
        board.append(list(input()))

    transposed_board = list(map(list, zip(*board)))
    palindrome_count = 0
    # 기존 board와 전치행렬된 baord를 solve에 적용해 행방향과 열방향의 회문을 조사함
    solve(board)
    solve(transposed_board)

    answers.append(palindrome_count)

for i in range(1, 11):
    print(f"#{i} {answers[i - 1]}")
