def make_player_combination(depth):
    global visited
    global combination
    global mx_point

    if depth == 8:
        players = combination[:3] + [0] + combination[3:]
        point = play_game(players)
        mx_point = max(mx_point, point)
        return


    for i in range(1, 9):
        if visited[i] == 1:
            continue
        combination.append(i)
        visited[i] = 1
        make_player_combination(depth + 1)
        combination.pop()
        visited[i] = 0


def play_game(players):
    p_idx = 0
    point = 0
    #[0] 이닝이 끝날때까지 경기를 진행한다
    for inning in play_information:
        out_count = 0
        runner = 0
        #[1] 아웃이 3개 나올 때까지 플레이
        while True:
            # [2] 경기 진행
            # 1) 고른 타순에 따른 선수의 이닝 정보를 가져온다
            # play = inning[combination[p_idx]]
            play = inning[players[p_idx]]
            pt, out, n_runner = play_ball(play, runner)

            # #새로운 곳 잠시
            point += pt
            out_count += out
            runner = n_runner

            # 2) 다음 타순으로 변경
            p_idx = (p_idx + 1) % 9

            #3) 아웃 판별
            if out_count == 3:
                break
    return point

def play_ball(play, runner):
    # pt, out, runner
    if play == 0:
        return 0, 1, runner

    if play == 1:
        if runner == 0:
            return 0, 0, 1

        if runner == 1:
            return 0, 0, 4

        if runner == 2 :
            return 0, 0, 7

        if runner == 3:
            return 1, 0, 1

        if runner == 4:
            return 0, 0, 5

        if runner == 5:
            return 1, 0, 5

        if runner == 6:
            return 1, 0, 7

        if runner == 7:
            return 1, 0, 4


    if play == 2:
        if runner == 0 :
            return 0, 0, 2

        if runner == 1:
            return 0, 0, 6

        if runner == 2:
            return 1, 0, 2

        if runner == 3:
            return 1, 0, 2

        if runner == 4:
            return 1, 0, 6

        if runner == 5:
            return 2, 0, 6

        if runner == 6:
            return 2, 0, 2

        if runner == 7:
            return 1, 0, 6

    if play == 3:
        if runner == 0:
            return 0, 0, 3

        if runner == 1:
            return 1, 0, 3

        if runner == 2:
            return 1, 0, 3

        if runner == 3:
            return 1, 0, 3

        if runner == 4:
            return 2, 0, 3

        if runner == 5:
            return 3, 0, 3

        if runner == 6:
            return 2, 0, 3

        if runner == 7:
            return 2, 0, 3


    if play == 4:
        if runner == 0:
            return 1, 0, 0

        if runner == 1:
            return 2, 0, 0

        if runner == 2:
            return 2, 0, 0

        if runner == 3:
            return 2, 0, 0

        if runner == 4:
            return 3, 0, 0

        if runner == 5:
            return 4, 0, 0

        if runner == 6:
            return 3, 0, 0

        if runner == 7:
            return 3, 0, 0



N = int(input())

play_information = []
for _ in range(N):
    play_information.append(list(map(int, input().split())))

mx_point =0
combination = []
#선수를 조합을 먼저 찾고 조합이 찾아지면 결과를 구한다
visited = [1, 0, 0, 0, 0, 0 ,0 ,0 ,0]
players = []
make_player_combination(0)



print(mx_point)
