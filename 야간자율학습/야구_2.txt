def make_player_combination(depth):
    global visited
    global combination
    global mx_point

    if depth == 8:
        players = combination[:3] + [0] + combination[3:]
        point = play_game(players)
        mx_point = max(mx_point, point)
        return

    for i in range(1, 9):
        if visited[i] == 1:
            continue
        combination.append(i)
        visited[i] = 1
        make_player_combination(depth + 1)
        combination.pop()
        visited[i] = 0

def play_game(players):
    p_idx = 0
    point = 0
    #[0] 이닝이 끝날때까지 경기를 진행한다
    for inning in play_information:
        out_count = 0
        b1, b2, b3 = 0, 0, 0
        #[1] 아웃이 3개 나올 때까지 플레이
        while True:
            # [2] 경기 진행
            # 1) 고른 타순에 따른 선수의 이닝 정보를 가져온다
            play = inning[players[p_idx]]
            if play == 0:
                out_count += 1

            if play == 1:
                point += b3
                b1, b2, b3 = 1, b1, b2

            if play == 2:
                point += (b2 + b3)
                b1, b2, b3 = 0, 1, b1

            if play == 3:
                point += (b1 + b2 + b3)
                b1, b2, b3 = 0, 0, 1

            if play == 4:
                point += (b1 + b2 + b3 + 1)
                b1, b2, b3 = 0, 0, 0

            # 2) 다음 타순으로 변경
            p_idx = (p_idx + 1) % 9

            #3) 아웃 판별
            if out_count == 3:
                break

    return point





N = int(input())

play_information = []
for _ in range(N):
    play_information.append(list(map(int, input().split())))

mx_point =0
combination = []
#선수를 조합을 먼저 찾고 조합이 찾아지면 결과를 구한다
visited = [1, 0, 0, 0, 0, 0 ,0 ,0 ,0]
players = []
make_player_combination(0)



print(mx_point)

