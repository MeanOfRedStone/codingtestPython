dx = [0, 1, 0, -1]
dy = [1, 0, -1, 0]

def find_exit():
    global N
    global M
    global board

    visited = [[0 for _ in range(M + 2)]for _ in range(N + 2)]
    q = []
    count = 1
    q.append([1, 1, count])
    visited[1][1] = 1

    while q:
        location = q.pop(0)
        row = location[0]
        col = location[1]
        count = location[2]

        for i in range(4):
            next_row = row + dx[i]
            next_col = col + dy[i]

            if visited[next_row][next_col] == 0 and board[next_row][next_col] == '1':
                if next_row == N and next_col == M:
                    return count + 1
                q.append([next_row, next_col, count + 1])
                visited[next_row][next_col] = 1

N, M = map(int, input().split())

board = [['0' for _ in range(M + 2)]]
for i in range(N):
    board.append(['0'] + list(input()) + ['0'])
board.append(['0' for _ in range(M + 2)])

count = find_exit()
print(count)