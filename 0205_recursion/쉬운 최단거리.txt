"""
1. 목표지점에서 bfs를 시도하면 모든 최단거리를 구할 수 있다
"""
from collections import deque

direction = [(0, 1), (0, -1), (1, 0), (-1, 0)]
def visit_check(i, j):
    global board
    global N
    global M
    global visited
    queue = deque()
    queue.append((i, j))
    visited[i][j] = 0

    while queue:
        row, col = queue.popleft()

        for dx, dy in direction:
            next_row = row + dx
            next_col = col + dy

            if board[next_row][next_col] == 1 and visited[next_row][next_col] == -1:
                queue.append((next_row, next_col))
                visited[next_row][next_col] = visited[row][col] + 1
                continue
            if board[next_row][next_col] == 0 and visited[next_row][next_col] == -1:
                visited[next_row][next_col] = 0

N, M = map(int, input().split())

board = [[0 for _ in range(M + 2)]]
for i in range(N):
    board.append([0] + list(map(int, input().split())) + [0])
board.append([0 for _ in range(M + 2)])
visited = [[-1 for _ in range(M + 2)]for _ in range(N + 2)]
for i in range(1, N + 1):
    for j in range(1, M + 1):
        if board[i][j] == 2:
            visit_check(i, j)

for i in range(1, N + 1):
    for j in range(1, M + 1):
        if board[i][j] == 0 and visited[i][j] == -1:
            visited[i][j] = 0

for row in range(1, N + 1):
    for col in range(1, M + 1):
        print(visited[row][col], end=" ")
    print()
exit()