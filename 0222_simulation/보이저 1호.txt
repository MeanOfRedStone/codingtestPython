#U, R, D, L
move = [(-1, 0), (0, 1), (1, 0), (0, -1)]


def signal(first_idx):
    #[0] 초기조건 설정 time, move_idx, r, c
    time = 0
    move_idx = first_idx
    r, c = si - 1, sj - 1

    #[1] 블랙홀을 만나거나 인덱스를 벗어나거나 무한대가 될 때까지 반복
    while True:
        dx, dy = move[move_idx]
        #1) 다음위치
        nr, nc = r + dx, c + dy

        #2) 제약 조건
        #(1) 범위 벗어나는 경우
        if nr < 0 or nr == N or nc < 0 or nc == M:
            break

        #(2) 블랙홀을 만나는 경우
        if board[nr][nc] == 'C':
            break

        #3) 이동할 수 있는 경우
        #(1) 시간 증가
        time += 1
        if time > 2 * (N * M):
            return 'Voyager'

        #(2) 행성 만날 경우
        if board[nr][nc] == "/":
            #위 아래일 경우
            if move_idx == 0 or move_idx == 2:
                move_idx = (move_idx + 1) % 4
            #오 왼일 경우
            elif move_idx == 1 or move_idx == 3:
                move_idx -= 1
        # '\'경우 처리해야함
        if board[nr][nc] == "\\":
            # 오 왼일 경우 -> 오른족 90도 회전
            if move_idx == 1 or move_idx == 3:
                move_idx = (move_idx + 1) % 4
            # 위 아래일 경우 -> 왼족 90 회전
            elif move_idx == 0:
                move_idx = 3
            elif move_idx == 2:
                move_idx = 1
        #(3) 위치 갱신
        r, c = nr, nc

    return time


N, M = map(int, input().split())

board = []

for _ in range(N):
    board.append(list(input()))

si, sj = map(int ,input().split())

answers = []
for d_idx in range(4):
    time = signal(d_idx)
    answers.append(time)

mx_idx = -1
mx_time = -1
direction = 'URDL'

for i in range(4):
    if answers[i] == 'Voyager':
        print(direction[i])
        print('Voyager')
        exit()

    if answers[i] > mx_time:
        mx_time = answers[i]
        mx_idx = i



print(direction[mx_idx])
print(mx_time + 1)