move = [(0, 0), (-1, 0), (1, 0), (0, -1), (0, 1)]
def move_robot(si, sj):
    global visited

    #[0] 첫 위치 설정 및 방문
    r, c = si, sj
    visited[r][c] = 1
    #[1] 4방향을 모두 탐색한다. (count =0인 경우 종료)
    while True:
        count = 0

        #[2] directions의 방향을 제약 조건 만날 때까지 탐색
        for d_idx in directions:
            dx, dy = move[d_idx]

            #[3] 제약 조건 만날 때까지 계속해서 현재 방향으로 탐색
            while True:
                nr, nc = r + dx, c+ dy

                #1)제약조건 만나면 종료
                #(1) 방문 체크
                if visited[nr][nc] == 1:
                    break
                #(2) 벽 or 장애물 체크
                if board[nr][nc] == -1:
                    break

                #2)방문 성공시
                #(1) count += 1
                count += 1
                #(2) 다음 위치 방문 표시
                visited[nr][nc] = 1
                #(3) 현재 위치 다음 위치로 갱신
                r, c = nr, nc

        # [4] 4방향을 돌동안 한번도 움직이지 못한다면 종료한다
        if count == 0:
            break

    return r - 1, c - 1


#방의 크기
R, C = map(int, input().split())

board = [[-1 for _ in range(C + 2)]]
for _ in range(R):
    board.append([-1] + [0 for _ in range(C)] + [-1])
board.append([-1 for _ in range(C + 2)])

#장애물의 개수
K = int(input())
barriers = []
for _ in range(K):
    # 장애물의 위치 br, bc
    br, bc = map(int, input().split())
    board[br + 1][bc + 1] = -1

sr, sc = map(int, input().split())
# 0은 공백, 1-위 , 2-아래, 3-왼쪽, 4-오른쪽

directions = list(map(int, input().split()))

#방문배열
visited = [[0 for _ in range(C + 2)]for _ in range(R + 2)]

ei, ej = move_robot(sr + 1, sc + 1)

print(ei, ej)